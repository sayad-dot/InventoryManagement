@model InventoryManagement.ViewModels.InventoryViewModel
@{
    ViewData["Title"] = Model.Title;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="card-title mb-0">@Model.Title</h4>
                        <div>
                            @if (Model.IsOwner)
                            {
                                <a asp-action="Settings" asp-route-id="@Model.Id" class="btn btn-outline-primary btn-sm">Settings</a>
                            }
                            <a asp-action="MyInventories" class="btn btn-outline-secondary btn-sm">Back to List</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <p class="card-text">@Model.Description</p>
                            
                            <div class="mb-3">
                                @if (!string.IsNullOrEmpty(Model.CategoryName))
                                {
                                    <strong>Category:</strong> <span class="badge bg-info">@Model.CategoryName</span>
                                }
                            </div>
                            
                            <div class="mb-3">
                                <strong>Tags:</strong>
                                @foreach (var tag in Model.Tags)
                                {
                                    <span class="badge bg-secondary me-1">@tag</span>
                                }
                            </div>
                            
                            <div class="row text-muted">
                                <div class="col-sm-6">
                                    <small><strong>Created:</strong> @Model.CreatedAt.ToString("MMMM dd, yyyy")</small>
                                </div>
                                <div class="col-sm-6">
                                    <small><strong>Updated:</strong> @Model.UpdatedAt.ToString("MMMM dd, yyyy")</small>
                                </div>
                                <div class="col-sm-6">
                                    <small><strong>Items:</strong> @Model.ItemCount</small>
                                </div>
                                <div class="col-sm-6">
                                    <small><strong>Access:</strong> @(Model.IsPublic ? "Public" : "Private")</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-center">
                            @if (!string.IsNullOrEmpty(Model.ImageUrl))
                            {
                                <img src="@Model.ImageUrl" class="img-fluid rounded" alt="@Model.Title" style="max-height: 200px;">
                            }
                            else
                            {
                                <div class="bg-light rounded d-flex align-items-center justify-content-center" style="height: 200px;">
                                    <i class="fas fa-image fa-3x text-muted"></i>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tabs for Inventory Management -->
            <ul class="nav nav-tabs mt-4" id="inventoryTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="items-tab" data-bs-toggle="tab" data-bs-target="#items" type="button" role="tab">Items</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="discussion-tab" data-bs-toggle="tab" data-bs-target="#discussion" type="button" role="tab">Discussion</button>
                </li>
                @if (Model.IsOwner)
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="settings-tab" data-bs-toggle="tab" data-bs-target="#settings" type="button" role="tab">Settings</button>
                    </li>
                }
            </ul>
            <div class="tab-content" id="inventoryTabsContent">
                <div class="tab-pane fade show active" id="items" role="tabpanel">
                    <div class="card border-top-0">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>Items in this Inventory</h5>
                                <a asp-action="Items" asp-route-id="@Model.Id" class="btn btn-primary btn-sm">
                                    <i class="fas fa-list me-1"></i>View All Items
                                </a>
                            </div>
                            
                            @if (Model.ItemCount > 0)
                            {
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    This inventory contains <strong>@Model.ItemCount</strong> items.
                                    <a asp-action="Items" asp-route-id="@Model.Id" class="alert-link">View and manage all items</a>.
                                </div>
                                
                                <div class="text-center">
                                    <a asp-action="Items" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                                        <i class="fas fa-external-link-alt me-1"></i>Open Items Management
                                    </a>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                    <h5>No items yet</h5>
                                    <p class="text-muted">Start by adding items to this inventory.</p>
                                    @if (Model.IsOwner || Model.IsPublic)
                                    {
                                        <a asp-action="CreateItem" asp-route-id="@Model.Id" class="btn btn-primary">Add Item</a>
                                    }
                                    else
                                    {
                                        <p class="text-muted">You need write access to add items to this inventory.</p>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                <!-- REAL-TIME DISCUSSION TAB -->
                <div class="tab-pane fade" id="discussion" role="tabpanel">
                    <div class="card border-top-0">
                        <div class="card-body">
                            <h5>Discussion Board</h5>
                            <p class="text-muted">Discuss this inventory with other users in real-time.</p>

                            <!-- Discussion Messages -->
                            <div id="discussionMessages" class="mb-3" style="max-height: 400px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 0.375rem; padding: 1rem;">
                                <div id="messagesContainer">
                                    <!-- Messages will be loaded here dynamically -->
                                </div>
                                <div id="loadingMessages" class="text-center py-3">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading messages...</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Message Input Form -->
                            @if (User.Identity?.IsAuthenticated == true)
                            {
                                <form id="messageForm" class="mt-3">
                                    <div class="input-group">
                                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." maxlength="2000" required>
                                        <button type="submit" class="btn btn-primary" id="sendButton">
                                            <i class="fas fa-paper-plane me-1"></i>Send
                                        </button>
                                    </div>
                                    <small class="form-text text-muted">Press Enter to send, Shift+Enter for new line.</small>
                                </form>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Please <a asp-controller="Account" asp-action="Login" class="alert-link">log in</a> to participate in the discussion.
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                @if (Model.IsOwner)
                {
                    <div class="tab-pane fade" id="settings" role="tabpanel">
                        <div class="card border-top-0">
                            <div class="card-body">
                                <h5>Inventory Settings</h5>
                                <p>Manage your inventory settings, custom fields, and access control.</p>
                                <a asp-action="Settings" asp-route-id="@Model.Id" class="btn btn-outline-primary">Manage Settings</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">About the Creator</h5>
                </div>
                <div class="card-body text-center">
                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center mx-auto mb-3" style="width: 80px; height: 80px;">
                        <i class="fas fa-user fa-2x text-white"></i>
                    </div>
                    <h6>@Model.CreatorName</h6>
                    <p class="text-muted">Inventory Owner</p>
                    <a href="#" class="btn btn-outline-info btn-sm">View Profile</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- SignalR Client Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // SignalR Connection for Real-time Discussion
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/discussionHub")
                .withAutomaticReconnect()
                .build();

            const inventoryId = @Model.Id;
            let isConnected = false;

            // Initialize discussion when discussion tab is shown
            document.getElementById('discussion-tab').addEventListener('shown.bs.tab', function() {
                if (!isConnected) {
                    initializeDiscussion();
                }
            });

            async function initializeDiscussion() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                    isConnected = true;

                    // Join the discussion group for this inventory
                    await connection.invoke("JoinDiscussionGroup", inventoryId);

                    // Load existing messages
                    await loadMessages();

                    // Setup real-time message handling
                    connection.on("ReceiveMessage", (message) => {
                        addMessageToUI(message, true);
                    });

                    connection.on("MessageDeleted", (messageId) => {
                        removeMessageFromUI(messageId);
                    });

                } catch (err) {
                    console.error("SignalR Connection Error: ", err);
                    setTimeout(initializeDiscussion, 5000);
                }
            }

            // Load existing messages from server
            async function loadMessages() {
                try {
                    const response = await fetch(`/Inventory/GetDiscussions?id=${inventoryId}`);
                    const messages = await response.json();
                    
                    const messagesContainer = document.getElementById('messagesContainer');
                    const loadingIndicator = document.getElementById('loadingMessages');
                    
                    messagesContainer.innerHTML = '';
                    loadingIndicator.style.display = 'none';
                    
                    messages.forEach(message => {
                        addMessageToUI(message, false);
                    });
                    
                    scrollToBottom();
                    
                } catch (error) {
                    console.error('Error loading messages:', error);
                    document.getElementById('loadingMessages').innerHTML = 
                        '<div class="alert alert-danger">Error loading messages. Please refresh the page.</div>';
                }
            }

            // Add message to UI
            function addMessageToUI(message, isNew) {
                const messagesContainer = document.getElementById('messagesContainer');
                const loadingIndicator = document.getElementById('loadingMessages');
                
                if (loadingIndicator.style.display !== 'none') {
                    loadingIndicator.style.display = 'none';
                }

                const messageElement = document.createElement('div');
                messageElement.className = `message-item mb-3 ${isNew ? 'new-message' : ''}`;
                messageElement.id = `message-${message.id}`;
                messageElement.innerHTML = `
                    <div class="card">
                        <div class="card-body py-2">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <h6 class="card-title mb-0 text-primary">${escapeHtml(message.userName)}</h6>
                                        <small class="text-muted">${message.createdAtDisplay}</small>
                                    </div>
                                    <p class="card-text mb-0">${escapeHtml(message.message)}</p>
                                </div>
                                ${message.canEdit ? `
                                <div class="dropdown ms-2">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item text-danger delete-message" href="#" data-message-id="${message.id}">Delete</a></li>
                                    </ul>
                                </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                `;

                if (isNew) {
                    messagesContainer.appendChild(messageElement);
                    scrollToBottom();
                    // Add highlight animation
                    messageElement.style.animation = 'highlight 2s ease-in-out';
                    setTimeout(() => {
                        messageElement.style.animation = '';
                    }, 2000);
                } else {
                    messagesContainer.appendChild(messageElement);
                }
            }

            // Remove message from UI
            function removeMessageFromUI(messageId) {
                const messageElement = document.getElementById(`message-${messageId}`);
                if (messageElement) {
                    messageElement.remove();
                }
            }

            // Scroll to bottom of messages
            function scrollToBottom() {
                const messagesContainer = document.getElementById('discussionMessages');
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            // Handle message form submission
            document.getElementById('messageForm')?.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const messageInput = document.getElementById('messageInput');
                const message = messageInput.value.trim();
                const sendButton = document.getElementById('sendButton');
                
                if (!message) return;

                // Disable send button during submission
                sendButton.disabled = true;
                sendButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Sending...';

                try {
                    const response = await fetch(`/Inventory/CreateDiscussion?id=${inventoryId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: `message=${encodeURIComponent(message)}`
                    });

                    if (response.ok) {
                        messageInput.value = '';
                        // Message will be added via SignalR
                    } else {
                        alert('Failed to send message. Please try again.');
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                    alert('Error sending message. Please check your connection.');
                } finally {
                    sendButton.disabled = false;
                    sendButton.innerHTML = '<i class="fas fa-paper-plane me-1"></i>Send';
                }
            });

            // Handle message deletion
            document.addEventListener('click', async function(e) {
                if (e.target.classList.contains('delete-message')) {
                    e.preventDefault();
                    
                    const messageId = e.target.getAttribute('data-message-id');
                    if (!confirm('Are you sure you want to delete this message?')) return;

                    try {
                        const response = await fetch(`/Inventory/DeleteDiscussion?discussionId=${messageId}`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();
                        if (!result.success) {
                            alert('Failed to delete message.');
                        }
                        // Message will be removed via SignalR
                    } catch (error) {
                        console.error('Error deleting message:', error);
                        alert('Error deleting message.');
                    }
                }
            });

            // Handle Enter key (send) and Shift+Enter (new line)
            document.getElementById('messageInput')?.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    document.getElementById('messageForm').dispatchEvent(new Event('submit'));
                }
            });

            // Utility function to escape HTML
            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            // Add CSS for animations
            const style = document.createElement('style');
            style.textContent = `
                .new-message {
                    animation: highlight 2s ease-in-out;
                }
                @@keyframes highlight {
                    0% { background-color: rgba(0, 123, 255, 0.1); }
                    100% { background-color: transparent; }
                }
                .message-item {
                    transition: all 0.3s ease;
                }
            `;
            document.head.appendChild(style);
        });
    </script>
}