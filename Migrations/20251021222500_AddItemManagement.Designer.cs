// <auto-generated />
using System;
using InventoryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251021222500_AddItemManagement")]
    partial class AddItemManagement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InventoryManagement.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InventoryManagement.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Office and technical equipment",
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Office furniture and fixtures",
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Books and publications",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Electronic devices and components",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Company vehicles and transportation",
                            Name = "Vehicles"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Tools and workshop equipment",
                            Name = "Tools"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Other categories",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("InventoryManagement.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CustomBool1Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomBool1Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomBool2Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomBool2Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomBool3Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomBool3Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomFile1Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomFile1Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomFile2Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomFile2Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomFile3Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomFile3Name")
                        .HasColumnType("text");

                    b.Property<string>("CustomIdFormat")
                        .HasColumnType("text");

                    b.Property<bool>("CustomNumber1Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomNumber1Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomNumber2Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomNumber2Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomNumber3Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomNumber3Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomString1Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomString1Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomString2Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomString2Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomString3Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomString3Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomText1Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomText1Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomText2Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomText2Name")
                        .HasColumnType("text");

                    b.Property<bool>("CustomText3Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomText3Name")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FieldOrder")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemCount")
                        .HasColumnType("integer");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("InventoryManagement.Models.InventoryAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryAccesses");
                });

            modelBuilder.Entity("InventoryManagement.Models.InventoryTag", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("InventoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("InventoryTags");
                });

            modelBuilder.Entity("InventoryManagement.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("CustomBool1Value")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CustomBool2Value")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CustomBool3Value")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomFile1Value")
                        .HasColumnType("text");

                    b.Property<string>("CustomFile2Value")
                        .HasColumnType("text");

                    b.Property<string>("CustomFile3Value")
                        .HasColumnType("text");

                    b.Property<string>("CustomId")
                        .HasColumnType("text");

                    b.Property<decimal?>("CustomNumber1Value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CustomNumber2Value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CustomNumber3Value")
                        .HasColumnType("numeric");

                    b.Property<string>("CustomString1Value")
                        .HasColumnType("text");

                    b.Property<string>("CustomString2Value")
                        .HasColumnType("text");

                    b.Property<string>("CustomString3Value")
                        .HasColumnType("text");

                    b.Property<string>("CustomText1Value")
                        .HasColumnType("text");

                    b.Property<string>("CustomText2Value")
                        .HasColumnType("text");

                    b.Property<string>("CustomText3Value")
                        .HasColumnType("text");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("InventoryManagement.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "office"
                        },
                        new
                        {
                            Id = 2,
                            Name = "technology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "furniture"
                        },
                        new
                        {
                            Id = 4,
                            Name = "books"
                        },
                        new
                        {
                            Id = 5,
                            Name = "electronics"
                        },
                        new
                        {
                            Id = 6,
                            Name = "tools"
                        },
                        new
                        {
                            Id = 7,
                            Name = "vehicles"
                        },
                        new
                        {
                            Id = 8,
                            Name = "supplies"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InventoryManagement.Models.Inventory", b =>
                {
                    b.HasOne("InventoryManagement.Models.Category", "Category")
                        .WithMany("Inventories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("InventoryManagement.Models.ApplicationUser", "Creator")
                        .WithMany("OwnedInventories")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("InventoryManagement.Models.InventoryAccess", b =>
                {
                    b.HasOne("InventoryManagement.Models.Inventory", "Inventory")
                        .WithMany("AccessUsers")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.ApplicationUser", "User")
                        .WithMany("AccessibleInventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventoryManagement.Models.InventoryTag", b =>
                {
                    b.HasOne("InventoryManagement.Models.Inventory", "Inventory")
                        .WithMany("InventoryTags")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Tag", "Tag")
                        .WithMany("InventoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("InventoryManagement.Models.Item", b =>
                {
                    b.HasOne("InventoryManagement.Models.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InventoryManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InventoryManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InventoryManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Models.ApplicationUser", b =>
                {
                    b.Navigation("AccessibleInventories");

                    b.Navigation("OwnedInventories");
                });

            modelBuilder.Entity("InventoryManagement.Models.Category", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryManagement.Models.Inventory", b =>
                {
                    b.Navigation("AccessUsers");

                    b.Navigation("InventoryTags");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("InventoryManagement.Models.Tag", b =>
                {
                    b.Navigation("InventoryTags");
                });
#pragma warning restore 612, 618
        }
    }
}
